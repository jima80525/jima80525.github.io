<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Snowboarding Coder - Posts</title><link href="/" rel="alternate"></link><link href="/feeds/posts.atom.xml" rel="self"></link><id>/</id><updated>2021-05-23T00:00:00-06:00</updated><subtitle>Musing on writing code</subtitle><entry><title>You Code Sucks ... And So Does Mine</title><link href="/you-code-sucks-and-so-does-mine.html" rel="alternate"></link><published>2021-05-23T00:00:00-06:00</published><updated>2021-05-23T00:00:00-06:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2021-05-23:/you-code-sucks-and-so-does-mine.html</id><summary type="html">&lt;p&gt;&lt;em&gt;"Ninety percent of everything is crap."&lt;/em&gt; - &lt;a href="https://en.wikipedia.org/wiki/Sturgeon%27s_law"&gt;Theodore Sturgeon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some recent dealings with a difficult co-worker got me thinking about this old saw and how it applies to software development. I spent some time examining what was making me so frustrated with this particular interaction and I decided it was not …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;"Ninety percent of everything is crap."&lt;/em&gt; - &lt;a href="https://en.wikipedia.org/wiki/Sturgeon%27s_law"&gt;Theodore Sturgeon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some recent dealings with a difficult co-worker got me thinking about this old saw and how it applies to software development. I spent some time examining what was making me so frustrated with this particular interaction and I decided it was not due to the soul-crushingly bad code they had generated, but their absolute insistence that it was excellent. &lt;/p&gt;
&lt;p&gt;This post isn't about the quality of that person's code nor is it about my own prima donna tenancies about code. It's a call to action for you, and more specifically me, to produce code that is "less bad". To that end, I've come up with four steps to producing less sucky code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Recognize&lt;/strong&gt; that your first (or second, or third) solution to the problem might not be perfect.  This goes back to Sturgeon's Law. The "ninety percent of everything" applies to &lt;em&gt;your&lt;/em&gt; code as well. There are vanishingly few pieces of code that as so good that they cannot be improved. Accept that most, if not all, of the code you produce could be better. Also recognize that there are few situations where aspiring to perfect code is actually appropriate. There's a big middle ground between "awful" and "perfect".  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Take extra time&lt;/strong&gt; to clean up your code. There are always deadlines to be met and schedules to be kept, but spending an extra hour or two on a piece of code to rename variables, restructure for readability, and generally refactor your code to make it better is not generally going to sink the ship. Spending that time in small increments has huge paybacks. Your future self will thank you for cleaner code and management will be unlikely to notice that you finished the task at 4pm instead of 1pm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accept feedback&lt;/strong&gt; and take it to heart.  Unless you're working with a bunch of sociopaths, if someone takes the time to review your code and has a comment on it, pay attention to it! That reviewer spent time and effort to do you the favor of trying to make your code better. Even if the point they're making is incorrect, spend some time considering that maybe it's not. They may have visibility into parts of the system that you do not. &lt;/li&gt;
&lt;li&gt;Finally, &lt;strong&gt;be kind&lt;/strong&gt;. These are tough times, but they're always tough times. Be kind to your co-workers. Try to read their feedback with good intent rather than assuming negatives. Try to be gentle in the feedback you give. And be kind to yourself. Being a member of a highly functional team is one of the greatest experiences of my career. Kindness and respect are the foundations of that type of team&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As I said above, this is mainly a way to get my thoughts out and remind myself of what's important, but I hope you find it useful as well!&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>Embedding Bokeh</title><link href="/embedding-bokeh.html" rel="alternate"></link><published>2020-01-13T00:00:00-07:00</published><updated>2020-01-13T00:00:00-07:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2020-01-13:/embedding-bokeh.html</id><summary type="html">&lt;p&gt;I've recently been using &lt;a href="https://bokeh.org/"&gt;bokeh&lt;/a&gt; to produce some charts for my team on a regular basis and I found it a remarkable tool for the job. I particularly appreciate that it will serve web pages from my machine so that I can share the graphs without needing to install anything …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've recently been using &lt;a href="https://bokeh.org/"&gt;bokeh&lt;/a&gt; to produce some charts for my team on a regular basis and I found it a remarkable tool for the job. I particularly appreciate that it will serve web pages from my machine so that I can share the graphs without needing to install anything on my manager's machine.&lt;/p&gt;
&lt;p&gt;During this process I created a bokeh script with several command line options to specify which data should be shown over what time frame. While running this over the course of a week or so, I struggled every morning to remember the right set of command line options to get the data I wanted on the external-facing IP address on a fresh port.&lt;/p&gt;
&lt;p&gt;I really wanted to have a self-contained script that would launch bokeh as part of its operation, rather than remembering which command line options I needed to specify. I found &lt;a href="https://stackoverflow.com/questions/51802159/how-to-embed-a-bokeh-server-in-a-standalone"&gt;this SO article&lt;/a&gt; which got me part of the way there, but I really wanted to specify IP address and port automatically.&lt;/p&gt;
&lt;p&gt;Below we'll walk through my current solution, which is not perfect, but works for what I need. Hopefully it can help you out as well.&lt;/p&gt;
&lt;h2&gt;Command Line Args&lt;/h2&gt;
&lt;p&gt;Let's start with the user interface. For this example, you'll just have one option for your graph and two options to pass to bokeh:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_command_line_args&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Read command line args, of course.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;store_true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;-e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;--external&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;store_true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;serve on local ip address instead of localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5006&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;socket port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_local_ip_addr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function starts with the graph option, &lt;code&gt;-b&lt;/code&gt; which changes the color of the line from red to blue. You will expand this out to be whatever options you need to pass to your script, or remove it if there are none. We'll see below how this gets passed to the "script" part of my program.&lt;/p&gt;
&lt;p&gt;The next option is &lt;code&gt;-e&lt;/code&gt; which switches the bokeh server from &lt;code&gt;localhost&lt;/code&gt; mode to serving the web page on an externally facing IP address. This option is just a bool, but we need to provide bokeh with a full IP address to use. You'll see that code below.&lt;/p&gt;
&lt;p&gt;Finally the &lt;code&gt;-p&lt;/code&gt; option is allowed for specifying the starting port number for serving. There is some code to retry with an increasing port number if the starting one is already in use. Again, we'll see this in another section below.&lt;/p&gt;
&lt;p&gt;Once you've read the command line args, you can do a little processing on them. Let's skip the &lt;code&gt;get_local_ip_addr()&lt;/code&gt; call at the moment and jump straight to the &lt;code&gt;-b&lt;/code&gt; option. The code uses this &lt;code&gt;bool&lt;/code&gt; to set a new value in &lt;code&gt;args&lt;/code&gt; to indicate if the graph line should be &lt;code&gt;red&lt;/code&gt; or &lt;code&gt;blue&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This could also be done by reading in a string value with the color in it. There are lots of options here, but this seemed the easiest.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now you can go and look at the IP address code.&lt;/p&gt;
&lt;h2&gt;Get Local IP Address&lt;/h2&gt;
&lt;p&gt;The code shown here is based closely on a &lt;a href="https://stackoverflow.com/a/166589/6843734"&gt;Stack Overflow&lt;/a&gt; answer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_local_ip_addr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# NOTE: this algorithm is not perfect. It will definitely not work if you&lt;/span&gt;
    &lt;span class="c1"&gt;# do not have an external internet connection&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;8.8.8.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# known valid external IP address&lt;/span&gt;
    &lt;span class="n"&gt;ip_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsockname&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ip_addr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As the comment indicates, this is not foolproof but should work for many reasonable situations. It works by opening a network socket to a public DNS server run by Google. It should work with any other reliable IP address that is reachable from your machine.&lt;/p&gt;
&lt;p&gt;Once the socket is open, you use &lt;code&gt;.getsockname()&lt;/code&gt; which returns the IP address and port on the local machine for that socket.&lt;/p&gt;
&lt;p&gt;Again, there are situations in which this will not work, but generally it will.&lt;/p&gt;
&lt;h2&gt;Starting the Server&lt;/h2&gt;
&lt;p&gt;Once we have the command line options set up, we can get to the actual bokeh part of the code. Here is &lt;code&gt;start_server()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attempts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;attempts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;attempts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;graph_it&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;num_procs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;allow_websocket_origin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,],&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;OSError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Address already in use&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Port &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; busy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed to find available port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There's a bunch of code here, but the main part is creating the &lt;code&gt;Server&lt;/code&gt; obejct. In &lt;code&gt;get_command_line_args()&lt;/code&gt; we made sure that both &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; are set to valid values, &lt;code&gt;localhost&lt;/code&gt; and &lt;code&gt;5006&lt;/code&gt; by default.&lt;/p&gt;
&lt;p&gt;These values and the passed-in &lt;code&gt;url&lt;/code&gt; are used to create the &lt;code&gt;Server&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;graph_it&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;num_procs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;allow_websocket_origin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first parameter to the constructor maps the passed-in &lt;code&gt;url&lt;/code&gt; to &lt;code&gt;graph_it()&lt;/code&gt; which is a basic bokeh plot I shamelessly stole from an example online.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;num_procs&lt;/code&gt; parameter allows bokeh to use multiprocessing for the underlying tornado server to handle multiple connections. For my example, one was sufficient, but it could be handy to increase in some circumstances.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; parameters are used twice, once to tell bokeh where to serve the graph, and once to allow cross-site connections to the address and port it's serving.&lt;/p&gt;
&lt;p&gt;Once you've created the &lt;code&gt;Server&lt;/code&gt; object, you call &lt;code&gt;server.start()&lt;/code&gt; to get it running.&lt;/p&gt;
&lt;p&gt;The rest of the function is a &lt;code&gt;while&lt;/code&gt; loop that looks for an &lt;code&gt;Address already in use&lt;/code&gt; error to try to find an open port. I found this handy while testing.&lt;/p&gt;
&lt;h2&gt;The Graphing Function&lt;/h2&gt;
&lt;p&gt;The graphing function is the actual bokeh script you want to run. This example is the shortest function I could find without too much effort. You should replace this with the script you're passing in to bokeh.&lt;/p&gt;
&lt;p&gt;The interesting portion is the hack I for the color arguments. There is a way to pass command line arguments through bokeh to the script it is calling, and I suspect there's an elegant way to do something similar here, but I'll admit I went for the easy round and just made the &lt;code&gt;args&lt;/code&gt; parameter a global and referenced in here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;graph_it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plot_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plot_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;My Line Plot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;line_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you figure out a better solution, please contact me and I'll update the example! I'd love to see it.&lt;/p&gt;
&lt;h2&gt;Running the I/O Loop&lt;/h2&gt;
&lt;p&gt;Finally you've hit the main portion of the script which puts all these pieces together:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_command_line_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip_addr&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Opening Bokeh application on http://&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Shutting Down&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You start by reading the command line arguments and setting up the &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;address&lt;/code&gt;, and &lt;code&gt;url&lt;/code&gt; parameters used to run the server.&lt;/p&gt;
&lt;p&gt;Next you create the server and start it. Note that this routine passed back the port that it selected as it can make many attempts to find an open port.&lt;/p&gt;
&lt;p&gt;The last block starts up the &lt;code&gt;io_loop&lt;/code&gt; for the underlying tornado server which manages the I/O to your bokeh app.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope someone found this helpful as I was happy with the solution for my particular problem and I was unable to find a good source of how to do this in my searching.&lt;/p&gt;
&lt;p&gt;For completeness I'll include the full script below. Please contact me if you have questions or suggestions to make this article or code better!&lt;/p&gt;
&lt;p&gt;Here's the full script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bokeh.plotting&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bokeh.server.server&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_local_ip_addr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# NOTE: this algorithm is not perfect. It will definitely not work if you&lt;/span&gt;
    &lt;span class="c1"&gt;# do not have an external internet connection&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;8.8.8.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# known valid external IP address&lt;/span&gt;
    &lt;span class="n"&gt;ip_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsockname&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ip_addr&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_command_line_args&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Read command line args, of course.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;store_true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;-e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;--external&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;store_true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;serve on local ip address instead of localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5006&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;socket port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_local_ip_addr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;graph_it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plot_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plot_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;My Line Plot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;line_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attempts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;attempts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;attempts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;graph_it&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;num_procs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;allow_websocket_origin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,],&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;OSError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Address already in use&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Port &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; busy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed to find available port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_command_line_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip_addr&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Opening Bokeh application on http://&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Shutting Down&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Posts"></category></entry><entry><title>Take Your Kid To PyCon Day</title><link href="/take-your-kid-to-pycon-day.html" rel="alternate"></link><published>2019-09-14T00:00:00-06:00</published><updated>2019-09-14T00:00:00-06:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2019-09-14:/take-your-kid-to-pycon-day.html</id><summary type="html">&lt;p&gt;I recently had the pleasure of attending the inaugural PyColorado with my oldest daughter.  She's twelve and enjoys coding, so it seemed like a good fit.  Plus it was a good chance to get some one-on-one time with her.&lt;/p&gt;
&lt;p&gt;I'll admit I was a little tentative going into the weekend …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently had the pleasure of attending the inaugural PyColorado with my oldest daughter.  She's twelve and enjoys coding, so it seemed like a good fit.  Plus it was a good chance to get some one-on-one time with her.&lt;/p&gt;
&lt;p&gt;I'll admit I was a little tentative going into the weekend, but I needn't have been. She absolutely loved it! Beyond the obvious things that would appeal to a 12-year-old (you mean they'll just GIVE me this t-shirt?), she seemed to enjoy watching the talks.&lt;/p&gt;
&lt;p&gt;Of course, many of the talks were above her head, but that's the point of attending talks, to learn!&lt;/p&gt;
&lt;p&gt;More importantly, I was concerned that she would be bored and not fit into the flow and feel of the conference.  I was wrong.  Not only was there another kid there (hi, Marshall!) but also the adults couldn't have been more polite, welcoming, and just genuinely happy to see her there.&lt;/p&gt;
&lt;p&gt;Given it was a Python conference and especially given the clearly stated stance on inclusion that the conference organizers have, I shouldn't have been surprised. They did a great job making her not only feel welcome but celebrating that she was there.&lt;/p&gt;
&lt;p&gt;This post comes with two messages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you're contemplating taking your child to a regional Python conference, I strongly encourage you to do it!&lt;/li&gt;
&lt;li&gt;Thank you to the PyColorado organizers and volunteers for making this a great weekend.  We'll see you next year!&lt;/li&gt;
&lt;/ul&gt;</content><category term="Posts"></category></entry><entry><title>Impostor at PyCon</title><link href="/impostor-at-pycon.html" rel="alternate"></link><published>2019-05-12T00:00:00-06:00</published><updated>2019-05-12T00:00:00-06:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2019-05-12:/impostor-at-pycon.html</id><summary type="html">&lt;p&gt;I'm on my way back from PyCon 2019 and I wanted to share part of a conversation I had a few times while there.&lt;/p&gt;
&lt;h2&gt;My Background&lt;/h2&gt;
&lt;p&gt;For those of you that may not know me and my history, I want to give some context to the story below. I've been …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm on my way back from PyCon 2019 and I wanted to share part of a conversation I had a few times while there.&lt;/p&gt;
&lt;h2&gt;My Background&lt;/h2&gt;
&lt;p&gt;For those of you that may not know me and my history, I want to give some context to the story below. I've been writing code for money for over thirty years, much of it doing embedded systems, frequently involving C++ and imaging.&lt;/p&gt;
&lt;p&gt;I recently came back to a job I had done previously (long story).  During my previous time at this company I had been half of the firmware architect team, designing a new direction for our camera firmware and starting the lengthy process of transitioning the codebase to that new architecture.&lt;/p&gt;
&lt;p&gt;After several years in this position, I decided I needed a new challenge and left the company for greener fields. Things happen, as they do, and I ended up bouncing back into the same lab in a similar role after about 18 months.&lt;/p&gt;
&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;You would think that with a bunch of experience that coming back to a familiar position into a codebase, much of which I architected, would be trivial, and, for most of the time it has been.&lt;/p&gt;
&lt;p&gt;But this story is about the those times in the months after re-starting this job that I was struck with the thought, no, the fear, actually, that I didn't know what I was doing and that, to use the common phrase, I was an "impostor".&lt;/p&gt;
&lt;p&gt;Now, I'll admit that in this situation, the feeling didn't last long and I was able to successfully go on with my transition. But it was a wake up call to me how prevalent and pernicious self-doubt can be.&lt;/p&gt;
&lt;p&gt;I've been working more with beginning programmers recently and have heard of them talking about feeling like an impostor on a frequent basis, so this time when the feeling struck, I paid attention to it.&lt;/p&gt;
&lt;h2&gt;Why Am I Sharing This&lt;/h2&gt;
&lt;p&gt;I shared this story at Pycon with a friend (hi, Katrina!) that is square in a mid-life career change. While talking with her it dawned on me that we as a community can help each other by sharing.&lt;/p&gt;
&lt;p&gt;Impostor syndrome is a real thing for her, just like it is for me. It makes it difficult to join in, to speak out, to push your ideas in a crowded world of smart people.&lt;/p&gt;
&lt;p&gt;I wanted her to know that this feeling, while it's a normal, human reaction, isn't reality.  We all can feel this, and I'm sure most of us do at one point or another.&lt;/p&gt;
&lt;p&gt;In my view the key is to recognize that it's a valid feeling, but that not letting it prevent you from joining, speaking, and pushing through is what will get you to your goals.&lt;/p&gt;
&lt;p&gt;So, if you're a seasoned developer, spend some time and effort thinking about this and what you can do to make life easier for new developers.  Are your processes documented?  Do you have an on-boarding process? Are you actively trying to be inclusive?&lt;/p&gt;
&lt;p&gt;And if you're  new developer, young or old, remember that this is just a normal reaction that is shared by all of us.  The only difference between an experienced and inexperienced developer is how many mistakes they've made.&lt;/p&gt;
&lt;p&gt;P.S. PyCon was super-cool and I'll happily rave about it if you're interested.&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>Design for the future, just not a *specific* future</title><link href="/design-for-the-future-just-not-a-specific-future.html" rel="alternate"></link><published>2018-08-30T00:00:00-06:00</published><updated>2018-08-30T00:00:00-06:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2018-08-30:/design-for-the-future-just-not-a-specific-future.html</id><summary type="html">&lt;p&gt;I've had the, um, &lt;em&gt;opportunity&lt;/em&gt; to work with some old code I've been avoiding since I re-started this job recently.  The time away and, frankly, a few deeps breaths, have helped me to gain some perspective on this system and why it bothers me so.&lt;/p&gt;
&lt;p&gt;There are lots of things …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've had the, um, &lt;em&gt;opportunity&lt;/em&gt; to work with some old code I've been avoiding since I re-started this job recently.  The time away and, frankly, a few deeps breaths, have helped me to gain some perspective on this system and why it bothers me so.&lt;/p&gt;
&lt;p&gt;There are lots of things to hate in this code; copy-pasta, cryptic names, language abuse (a 45 line macro, anyone?).  While those are all bad in their own right, the fundamental issue I keep coming back to is the design of the system.&lt;/p&gt;
&lt;p&gt;The system is a simple library which was used in exactly one product line.    It is a library linked into a bigger code base to serve a single purpose.  Unfortunately, the architect of this system had grand plans and ideas.  He was convinced that this library would conquer the world.&lt;/p&gt;
&lt;p&gt;So he built what he described as a "Plug-in architecture, just like Firefox" which would allow us to bring in third party components and integrate them into this library.  He designed it to run on Windows &lt;strong&gt;and&lt;/strong&gt; Linux (target product was Linux only).  Worse, because he insisted he needed 'flexibility' for the future, he refused to make use of the system services (logging, configuration, settings) that the bigger product provided.&lt;/p&gt;
&lt;p&gt;Because the library was over designed, it is much larger and much more complex than needed.  And this is where my frustration overflows.  The designer had a very clear vision of a future in mind, but he built this system to a very, very specific set of conditions.   By doing so, he actually eliminated any possibility that another project would pick up his library.  it was too big, too clunky, too complex.&lt;/p&gt;
&lt;p&gt;I'd like to think that if he and the team had kept the system smaller, leaner, less complex, that the end result would have been far more useful.  As it is, we're working hard to eliminate that code from our products.  It'll take a while.&lt;/p&gt;
&lt;p&gt;The lesson I'm going to take from this experience is that I should plan for the future, but I should plan for any future by keeping the design lean, flexible, and as small as possible.&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>Pay Me Now, or Pay Me Later</title><link href="/pay-me-now-or-pay-me-later.html" rel="alternate"></link><published>2018-06-27T00:00:00-06:00</published><updated>2018-06-27T00:00:00-06:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2018-06-27:/pay-me-now-or-pay-me-later.html</id><summary type="html">&lt;p&gt;Our team recently lost a critical member suddenly and unexpectedly.  This has caused a great deal of consternation as he was the glue that held our build system together.  For years my company has paid short-shrift to devops, figuring that good enough was good enough.&lt;/p&gt;
&lt;p&gt;This developer was hired originally …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our team recently lost a critical member suddenly and unexpectedly.  This has caused a great deal of consternation as he was the glue that held our build system together.  For years my company has paid short-shrift to devops, figuring that good enough was good enough.&lt;/p&gt;
&lt;p&gt;This developer was hired originally to do devops for the team, but, as he had desire and skills to move into a developer role, he was fairly quickly spending half of his time (at least) writing code.  I had worked with him over several years on getting the build system running along, only requiring maintenance on irregular intervals and, frankly, ignoring the odd collection of servers on which we were running.&lt;/p&gt;
&lt;p&gt;There were always fires to put out or new products to get off the ground and to customers, sitting down and actually planning out our infrastructure never seemed all that exciting or important.&lt;/p&gt;
&lt;p&gt;Until now.&lt;/p&gt;
&lt;p&gt;I'm sure many of you know how this goes. With that key critical piece of the team gone, we've been scrambling to figure out who owns which servers (this is a part of a large corporation, we've got servers owned and managed by at least three different entities), what, exactly, each one does, and what login credentials we have.&lt;/p&gt;
&lt;p&gt;I'm not blaming the other developer, as I'm also to blame.  Frankly the entire lab shares some responsibility as well.  That's not really important at this point.  What &lt;strong&gt;is&lt;/strong&gt; important, however, is learning from the mistake and getting our system not only back up and running, but also documented and understood to the point that we can hire someone to manage it and improve it.&lt;/p&gt;
&lt;p&gt;There are always excuses for not getting the build (or the project, or the test harness) documented, and sometimes those excuses are valid.  Unfortunately there frequently comes a time when you have to pay for that technical debt.&lt;/p&gt;
&lt;p&gt;Here's hoping that I personally and my team in general will learn and grow from this experience and find the right balance between moving quickly and ensuring our systems and designs are stable.&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>Bad Code - Volume 1</title><link href="/bad-code-volume-1.html" rel="alternate"></link><published>2018-04-16T00:00:00-06:00</published><updated>2018-04-16T00:00:00-06:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2018-04-16:/bad-code-volume-1.html</id><summary type="html">&lt;p&gt;At the ill-advised encouragement of a friend of mine, I've decided to start a series of posts about some of the awful code I stumble across in my day-to-day life.&lt;/p&gt;
&lt;p&gt;In a way, I already started this series with my post on &lt;a href="https://www.snowboardingcoder.com/coding/2018/03/27/functors-to-the-rescue/"&gt;bad functors&lt;/a&gt;, so this is just continuing in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At the ill-advised encouragement of a friend of mine, I've decided to start a series of posts about some of the awful code I stumble across in my day-to-day life.&lt;/p&gt;
&lt;p&gt;In a way, I already started this series with my post on &lt;a href="https://www.snowboardingcoder.com/coding/2018/03/27/functors-to-the-rescue/"&gt;bad functors&lt;/a&gt;, so this is just continuing in that vein.&lt;/p&gt;
&lt;p&gt;Today's bad code is titled "How to find the N largest rectangles".  In some motion detection code I've recently reviewed from a vendor, they needed some code that took an array of rectangle structs and found the &lt;code&gt;max_number_found&lt;/code&gt; biggest rectangles.  Due to hardware limitations, they would never be more than 254 rects in the list.&lt;/p&gt;
&lt;p&gt;Now, I know what many of you, at least those of you that are sane, are thinking: "duh, sort the list, take the first max_number_found".   If so, bonus points for you.&lt;/p&gt;
&lt;p&gt;Alas, the developers who generated this code didn't think that was a good idea.  No.  That would be wasteful.&lt;/p&gt;
&lt;p&gt;I'll show you the code first, then we'll walk through the insanity.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;startingThreshold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;number_found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;threshold_increment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;254&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rectangles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;number_found&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_found&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;max_number_found&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;254&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rectangles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// add rectangle[i] to list&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;What Does &lt;strong&gt;That&lt;/strong&gt; Do?&lt;/h2&gt;
&lt;p&gt;For starters I should point out that &lt;code&gt;startingThreshold&lt;/code&gt; and &lt;code&gt;threshold_increment&lt;/code&gt; are passed in to the function.  Their values don't actually matter to much in terms of what the algorithm does, though they might effect the performance.&lt;/p&gt;
&lt;p&gt;The top &lt;code&gt;do-while&lt;/code&gt; loop is the real doozy here.  It starts at a specified 'threshold' and walks through all 254 rectangles, counting how many are above the threshold.  If the number found is too many, in increases the threshold and tries again.  Repeat until we have a solution.&lt;/p&gt;
&lt;p&gt;The second loop then walks through the list one last time to actually do the copy.  That part isn't insane once you've bitten off the first part.&lt;/p&gt;
&lt;p&gt;There are so many problems here it's tough to know where to start.  It's tempting to mention that the performance is likely to be quite poor, although this doesn't really matter as it was demo code and, with 254 elements, performance doesn't matter too much.    That said,  the worst case for this algorithm does over 64,000 comparisons.&lt;/p&gt;
&lt;p&gt;Next would be the many corner cases here.  What happens if all of the rectangles are the same size (you get a 0 length list)?   How would a caller know what to place for a threshold_increment?&lt;/p&gt;
&lt;p&gt;Finally comes the readability issue.  This is code that takes a simple problem and explodes it into a confusion-inducing slab of code.  Even knowing what the intention was, it still took a few minutes to put together all the pieces here.&lt;/p&gt;
&lt;p&gt;That's the bad code for this week.  I'll keep my eye out for more gems and share them here.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>Functors to the Rescue!</title><link href="/functors-to-the-rescue.html" rel="alternate"></link><published>2018-03-26T00:00:00-06:00</published><updated>2018-03-26T00:00:00-06:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2018-03-26:/functors-to-the-rescue.html</id><summary type="html">&lt;p&gt;I've recently had the singular pleasure of working with some legacy code written by a team I (thankfully) no longer work with directly. This team had several issues, one of which I'll address in a later post, one I'll discuss today.&lt;/p&gt;
&lt;p&gt;Today's issue is that the team was very enamored …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've recently had the singular pleasure of working with some legacy code written by a team I (thankfully) no longer work with directly. This team had several issues, one of which I'll address in a later post, one I'll discuss today.&lt;/p&gt;
&lt;p&gt;Today's issue is that the team was very enamored of new technology, but not overly concerned with readability. This combination produces some quite interesting code. One of the anti-patterns that I see frequently in their code is the use of functors in situations where they only serve to obfuscate the code.&lt;/p&gt;
&lt;p&gt;In the example I found, they had a map and wanted to search for a key given a known value. Here's the code the produced:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;PresetMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;CompareString&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;CompareString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ptz&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_str&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ptz&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;_str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;getPreset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;preset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PresetMap&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PresetMap&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;CompareString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preset&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One might argue that it's quite reasonable to use a functor in this case if there are other places where that functor is re-used. Alas, this was not the case. This was the sole use of that functor. I haven't verified, but I'd strongly suspect that there are multiple instances of very similar functors scattered throughout the code base, all used exactly once.&lt;/p&gt;
&lt;p&gt;For the record, I spent a few minutes rewriting this into what &lt;em&gt;I&lt;/em&gt; view as a 'sane' approach:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;newGetPreset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;presetName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PresetMap&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="nl"&gt;preset&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;presetName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;preset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While there's an argument to be made that reusing the search algorithm from the stdlib is a higher good, I'd counter that readability is much, much more important, especially for such a trivial use case.&lt;/p&gt;
&lt;p&gt;Spreading a simple search across 17 lines when a simple 8 line function will do seems a little extravagant.&lt;/p&gt;
&lt;p&gt;To the team's credit, at least in this case the functor was immediately before the &lt;code&gt;getPreset&lt;/code&gt; function in the source file. I have hit other examples where the two were separated by hundreds of lines of source.&lt;/p&gt;
&lt;p&gt;There are lots of reasons why code ends up like this, but the biggest one, in my opinion, is not having a strong code review culture where decisions like this are questioned.&lt;/p&gt;
&lt;p&gt;What do you think of this code? Am I completely missing the mark?&lt;/p&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;A different former-coworker read this and pointed out that I missed the ball by not including C++'s &lt;code&gt;lambda&lt;/code&gt; functionality for this problem.  I've used lambdas in other languages, but my C++ was always limited to pre-C++11 before this, so the syntax was new to me.  Here's what the same function looks like with a lambda:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;lambdaGetPreset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;preset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PresetMap&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;preset&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ptz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;preset&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ptz&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;myMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'll admit it still looks a bit odd to me, but that's mainly due to the lambda syntax being new.  I suspect once I get used to it, this will seem more reasonable to me.  I certainly wouldn't be thinking about changing it to make it more readable as I was with the original.&lt;/p&gt;
&lt;p&gt;Thanks to Erik for pointing out lambdas!&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>Using the Linux 'script' command</title><link href="/using-the-linux-script-command.html" rel="alternate"></link><published>2018-03-04T00:00:00-07:00</published><updated>2018-03-04T00:00:00-07:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2018-03-04:/using-the-linux-script-command.html</id><summary type="html">&lt;p&gt;While working on a different project, I recently discovered the 'script' command in Linux.  It captures all of the input and output from a shell session.  This can be really handy if you want to write a blog post that involves a lot of commands.&lt;/p&gt;
&lt;p&gt;I did find that there …&lt;/p&gt;</summary><content type="html">&lt;p&gt;While working on a different project, I recently discovered the 'script' command in Linux.  It captures all of the input and output from a shell session.  This can be really handy if you want to write a blog post that involves a lot of commands.&lt;/p&gt;
&lt;p&gt;I did find that there were a few shortcomings in the tool's interaction that took a bit to work around: my prompt is fairly complicated and causes the script log to look funny, and all of the cool settings I've built over the years to colorize commands really make a mess.&lt;/p&gt;
&lt;h2&gt;Fixing the prompt for script&lt;/h2&gt;
&lt;p&gt;My bash prompt is set in my .bashrc file. The problem I found is that while I really like my normal prompt, I want to use a trimmed down version of it when I'm capturing scripts.  In order to do this, I've modified the portion of of my .bashrc to set a different prompt if I'm in the script command.  I did not find a way to automatically determine if I was running script or not, so I ended up using an environment variable to determine which prompt to set (more on this later).&lt;/p&gt;
&lt;p&gt;The prompt-setting portion of the bashrc now looks something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; -z ${RUN_SCRIPT+x} &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;general&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;purpose&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;setting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Also&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fortune&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;few&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;don&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t want to run in script&lt;/span&gt;
&lt;span class="s1"&gt;else&lt;/span&gt;
&lt;span class="s1"&gt;   PS1=&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SCRIPT&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nl"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;fi&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For those of you unfamiliar with the vagaries of setting prompts in bash, the &lt;code&gt;\w&lt;/code&gt; portion get replaced with the current directory.  If you're in the &lt;code&gt;~/coding/project&lt;/code&gt; directory, this line will set the main bash prompt to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SCRIPT&lt;/span&gt;&lt;span class="o"&gt;]~/&lt;/span&gt;&lt;span class="n"&gt;coding&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nl"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Cleaning up the special characters&lt;/h2&gt;
&lt;p&gt;Once I got the prompt figured out, I noticed that several commands colorize the output which generates special characters in the captured output.  While your normal terminal knows how to deal with these characters, it looks pretty goofy in the captured output.&lt;/p&gt;
&lt;p&gt;Doing a bit of "research" (a.k.a. Google), I found a quick Perl script that will strip those characters out.  As I mentioned above, I want to set an environment varaible before I run script (and unset it when I'm done), so I was already thinking about creating a bash function.  This function is the perfect place to run this cleanup script on the output.  Here's what the function (which lives in my .bashrc) looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;runscript&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;# set the name of the output file, default &amp;#39;typescript&amp;#39;&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;
      &lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;typescript&amp;quot;&lt;/span&gt;
   &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="n"&gt;fi&lt;/span&gt;
   &lt;span class="c1"&gt;# set env variable to flag special prompt creation&lt;/span&gt;
   &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="n"&gt;RUN_SCRIPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;

   &lt;span class="c1"&gt;# run script and capture the shell output&lt;/span&gt;
   &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;

   &lt;span class="c1"&gt;# use regex in Perl, col, and mv to clean up the output&lt;/span&gt;
   &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pe&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/\e([^\[\]]|\[.*?[a-zA-Z]|\].*?&lt;/span&gt;&lt;span class="se"&gt;\a&lt;/span&gt;&lt;span class="s1"&gt;)//g&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;processed&lt;/span&gt;
   &lt;span class="n"&gt;mv&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;processed&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;

   &lt;span class="c1"&gt;# unset env variable to flag special prompt creation&lt;/span&gt;
   &lt;span class="n"&gt;unset&lt;/span&gt; &lt;span class="n"&gt;RUN_SCRIPT&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Walking through this, we set the &lt;code&gt;$NAME&lt;/code&gt; variable to either the default (typescript) or the first command line argument.  Then we export the environment variable we'll use to control the prompt creation and run the &lt;code&gt;script&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;After &lt;code&gt;script&lt;/code&gt; returns, we use the magic perl script.  I'm not going to dive into the details of the regex, as it's fairly gnarly and, frankly, not that interesting once it works.  Finally, I move the &lt;code&gt;-processed&lt;/code&gt; file back to the original requested filename.&lt;/p&gt;
&lt;p&gt;That's it!  With that in my .bashrc, I can now use the &lt;code&gt;runscript &amp;lt;filename&amp;gt;&lt;/code&gt; command and it logs all of the output with my custom prompt and without the colorizing characters!&lt;/p&gt;
&lt;p&gt;If you'd like more details on the 'script output cleanup' issue, I'd recommend &lt;a href="https://superuser.com/questions/236930/how-to-clean-up-output-of-linux-script-command"&gt;this SuperUser post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you'd like more info on how to configure your prompt in bash, check &lt;a href="https://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope this was helpful!&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>Restarting a Job</title><link href="/restarting-a-job.html" rel="alternate"></link><published>2018-02-22T00:00:00-07:00</published><updated>2018-02-22T00:00:00-07:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2018-02-22:/restarting-a-job.html</id><summary type="html">&lt;p&gt;After my last employer shut down our site and sent us all packing, I took some time to consider what I wanted from a new job and what things were important. Much to my surprise, after some good timing and a lot of long discussions, I ended up back at …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After my last employer shut down our site and sent us all packing, I took some time to consider what I wanted from a new job and what things were important. Much to my surprise, after some good timing and a lot of long discussions, I ended up back at a company I had worked for and left not too long ago.  Suffice it to say that there were some new opportunities and enough things had changed (particularly senior management) that I thought this would be a good position for me.  The reasons I came back are not what I want to discuss here, however.&lt;/p&gt;
&lt;p&gt;Coming back to a position is an interesting experience.  I basically know how the tools and systems should work (heck, I wrote many of them), but I haven't used them in long enough that many of the details have gone.  I've found myself struggling to find information about basic setups and tools that I know are needed to do the job - this is writing code for an embedded systems, so the debug environment can get a little complex.  This is a really good learning experience for me.  When I curse the idiot that didn't write up a "getting started" document for setting these tools up, I quickly remember that &lt;em&gt;I&lt;/em&gt; am that idiot.&lt;/p&gt;
&lt;p&gt;I remember reading, a few years ago, a blog post about gender inequity in the tech world which made the point that not having good documentation is a larger hurdle for women/minorities/anyone who doesn't fit into the dominant culture of the lab.  Requiring new engineers to "ask around", "know who to ask", or other similar requirements can be difficult, especially if you're different from most of the rest of the group.  Add a good dose of &lt;a href="https://en.wikipedia.org/wiki/Impostor_syndrome"&gt;imposter syndrome&lt;/a&gt; to the new employee and it gets harder and harder to get established.&lt;/p&gt;
&lt;p&gt;I keep reminding myself that if I'm frustrated, if I'm intimidated, if I'm concerned that I'm not getting started quickly enough or getting enough done, and I'm a senior engineer who's already done this job once, then coming in as a new hire into a group you don't know is really going to be draining.&lt;/p&gt;
&lt;p&gt;So, if you're safely ensconced in a development job take a few minutes and start documenting how to get started, how to do various tasks that only you know.  If you're starting something new, take good notes and try to figure out how you can share them with the team and with other newcomers.&lt;/p&gt;
&lt;p&gt;My first code review was today.  It was for a 'getting started' guide.&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>How To Stay Motivated During Tough Times At Work</title><link href="/how-to-stay-motivated-during-tough-times-at-work.html" rel="alternate"></link><published>2018-02-08T00:00:00-07:00</published><updated>2018-02-08T00:00:00-07:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2018-02-08:/how-to-stay-motivated-during-tough-times-at-work.html</id><summary type="html">&lt;p&gt;NOTE: This post was written a few months ago during a period of turmoil at my job.  I've since moved on and started a new position.&lt;/p&gt;
&lt;p&gt;As I mentioned in a &lt;a href="https://www.snowboardingcoder.com/coding/2018/01/24/should-i-stay-or-should-i-go-now/"&gt;previous post&lt;/a&gt;, I'm in a chaotic time at work, leading me to debate (on an almost daily basis) if …&lt;/p&gt;</summary><content type="html">&lt;p&gt;NOTE: This post was written a few months ago during a period of turmoil at my job.  I've since moved on and started a new position.&lt;/p&gt;
&lt;p&gt;As I mentioned in a &lt;a href="https://www.snowboardingcoder.com/coding/2018/01/24/should-i-stay-or-should-i-go-now/"&gt;previous post&lt;/a&gt;, I'm in a chaotic time at work, leading me to debate (on an almost daily basis) if I need to get serious about job hunting.&lt;/p&gt;
&lt;p&gt;At present, I've decided to ride out the chaos, but that leads to a new problem: how to stay motivated and keep doing a good job while things are going wonky.&lt;/p&gt;
&lt;p&gt;As has been my experience in several previous jobs, when things start getting tough at work, the rumor mill really takes off.   There are a couple of stages of this.  It starts with smaller side coversations about the future of the company/product/group.  Eventually, if things continue on that path, this breaks out into open, group-wide gripe sessions about what's 'going to happen' and how managaement is being dishonest or making dumb decisions.&lt;/p&gt;
&lt;p&gt;I've learned a few lessons about these sessions:&lt;/p&gt;
&lt;p&gt;1) No one involved really knows anything. It may be that their guesses are correct, but I've found that generally, the folks sitting around griping are not the ones with the knowledge of the real situation.&lt;/p&gt;
&lt;p&gt;2) Management is never going to give you answers to silly questions that always get asked in times like these: "will there be layoffs?", "Is the site getting shut down?", etc.  I call this type of question silly as there is no good answer to them.  No sane manager that is actually doing her job is going to answer them truthfully.  Frequently it would actually be illegal to answer them truthfully.&lt;/p&gt;
&lt;p&gt;The next time you hear a question like this, play out the potential responses.  If the manager says, "No, the site's is not getting shut down next month".  How much credence will you give that answer?  Will it change anything?&lt;/p&gt;
&lt;h2&gt;Coping&lt;/h2&gt;
&lt;p&gt;So, here is my coping plan for the next couple weeks/months/however long this lasts.&lt;/p&gt;
&lt;p&gt;I'm going to try to avoid the rumor-mill conversations or get out of them as quickly and quietly as I can.  Those might feel good at the time, but they ruin your momentum and motivation.&lt;/p&gt;
&lt;p&gt;I'm also going to try to stay focused on the task.  Some times keeping your head down and just working is a good thing.  I'm fortunate that I currently have more than enough work to do to keep me busy.  That work may turn out to be futile in the end, but I need to remember that how I &lt;em&gt;do&lt;/em&gt; the work matters and my reputation with my co-workers is one of my most valuable assets.&lt;/p&gt;
&lt;p&gt;I'm going to focus on keeping calm and knowing that I can ride out this storm.  The worst case scenario here is that this job goes away tomorrow, next weeek, next month.  I knew this job wasn't "forever" when I took it.  I should gain what I can while it lasts, both in terms of knowledge and skill and also in reputation with my peers.   I've been laid off before on several occassions.  It's been the community I've built around me that has pulled me through in those times.&lt;/p&gt;
&lt;p&gt;That said, I'll definitely keep my eyes open for interesting opportunities that cross my path.  One shouldn't bury one's head in the sand, after all.&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>Command Line Args Libraries - A Comparison</title><link href="/command-line-args-libraries-a-comparison.html" rel="alternate"></link><published>2018-01-31T00:00:00-07:00</published><updated>2018-01-31T00:00:00-07:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2018-01-31:/command-line-args-libraries-a-comparison.html</id><summary type="html">&lt;p&gt;Creating command line interfaces is a well-worn path.  There are a lot of libraries out there which will help you simplify the process.  In this post I'm going to do a brief rundown of a couple of these tools and my impresions of them.  I'll admit up front that my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Creating command line interfaces is a well-worn path.  There are a lot of libraries out there which will help you simplify the process.  In this post I'm going to do a brief rundown of a couple of these tools and my impresions of them.  I'll admit up front that my conclusions are entirely subjective (no surprise there), but I'll try to call my biases out as we go.&lt;/p&gt;
&lt;p&gt;The packages we'll be looking at here are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;argparse (part of stdlib)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://click.pocoo.org/5/"&gt;click&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://clize.readthedocs.io/en/stable/index.html"&gt;clize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/docopt/docopt/tree/master/examples"&gt;docopt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/python-fire"&gt;fire&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/micheles/plac"&gt;plac&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The task&lt;/h2&gt;
&lt;p&gt;For this comparison, I'm only going to evaluate a very straightforward set of options.  I do this for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I think most situations are really only going to call for this.&lt;/li&gt;
&lt;li&gt;It's the actual set of options I needed for the script I was working on.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The easiest way to share these with you is to show you the usage output from one of my tests.  This is from the click version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clicktest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;Usage&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clicktest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LOGFILES&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nl"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="k"&gt;limit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;INTEGER&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Smallest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shown&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;TEXT&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;only&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;these&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comma&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;separated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;TEXT&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;Exclude&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;these&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comma&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;separated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--help           Show this message and exit.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Limit will be an integer and include and exclude will be strings.&lt;/p&gt;
&lt;p&gt;For each of the libraries I'll be looking at, I'll show the relevant code and an example of how the LIMIT field is displayed.  The full source for all of the tests is at this repo.  (TODO add github repo)&lt;/p&gt;
&lt;h2&gt;The Contenders&lt;/h2&gt;
&lt;h3&gt;Argparse&lt;/h3&gt;
&lt;p&gt;Argparse is the option to beat, primarily because it's included in the standard library.  It handles this job well, is a little verbose and generates a good usage output.&lt;/p&gt;
&lt;p&gt;Here's the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;log files to process&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--limit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Smallest value shown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--include&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Show only these comma separated commands&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--exclude&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Exclude these comma separated commands&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;limit = &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code has a couple of great features; It's fairly obvious what it is doing, and it has no dependencies on other modules.  On the flip side, it's fairly long and all of the arguments are returned in an object which must be dereferenced, though some might call this an advantage.&lt;/p&gt;
&lt;p&gt;There's another issue with argparse.  It does not handle out of order parameters well at all.  The test example allows for multiple &lt;code&gt;input&lt;/code&gt; arguments. With most of the other libraries, you can specify these whereever you want on the command line, including sprinkled between the options.  Argparse needs them all put together.  Not a huge deal, but a minor limitation.&lt;/p&gt;
&lt;h3&gt;Click&lt;/h3&gt;
&lt;p&gt;Click has a lot of followers and for good reason.  It does much more than just command line argument parsing.  It has a large array of utility features that can come in handy when doing CLIs; bash aliasing, user prompting, paginating, and many more.&lt;/p&gt;
&lt;p&gt;The code to get these options in click is done with decorators and looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context_settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;help_option_names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--help&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-l&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--limit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Smallest value shown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--include&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Show only these comma separated commands&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--exclude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Exclude these comma separated commands&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logfiles&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;limit = &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll note that parameters all come in as paramters to your function which is handy.  Also note the use of the &lt;code&gt;click.echo&lt;/code&gt; function instead of &lt;code&gt;print&lt;/code&gt;.  This is one of the utilities and behaves just like print except it fixes a few corner cases for you (printing Unicode, etc).&lt;/p&gt;
&lt;p&gt;This is still fairly explicit in what it's doing like argparse, but seems to move the options out of the function and into the decorators which provides a nice separation.&lt;/p&gt;
&lt;p&gt;Click does have one oddity (at least in the version I was testing) in that while it  does support --help, it does not support the -h option automatically.  The first line of the code above is the magic to get it to accept -h in addition to --help.  This seems like a strange oversight, but I suspect they wanted to cut down the opportunity of option collision.&lt;/p&gt;
&lt;p&gt;Also, in my limited time to evaluate Click, I was unable to figure out how to customize the help message for the arguments.&lt;/p&gt;
&lt;h3&gt;clize&lt;/h3&gt;
&lt;p&gt;Clize is the takes simplification to the next level.  If you don't care about the help string shown for each parameter, parameter types, or default values, it will just use introspection and treat all of the parameters as command line options or arguments.&lt;/p&gt;
&lt;p&gt;Clize uses a clever combination of type annotation and docstrings to produce the desired functionality.&lt;/p&gt;
&lt;p&gt;Here's the same functionality using clize:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;clize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;REQUIRED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    process log files&lt;/span&gt;

&lt;span class="sd"&gt;    :param input: log files to process&lt;/span&gt;
&lt;span class="sd"&gt;    :param include: Show only these comma separated commands&lt;/span&gt;
&lt;span class="sd"&gt;    :param exclude: Exclude these comma separated commands&lt;/span&gt;
&lt;span class="sd"&gt;    :param limit: Smallest value shown&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;limit = &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see the type annotations are used not only to set properties of arguments but also to specify the short options.  The docstrings are then parsed to provide the extended information for each item in the list.&lt;/p&gt;
&lt;p&gt;While I think this is really clever, I dislike having the option information spread across two different locations.&lt;/p&gt;
&lt;h3&gt;docopt&lt;/h3&gt;
&lt;p&gt;Docopt is a beautiful idea on the surface of it: Use the docstring for your script to both document and define the command line options and arguments and to generate the usage message.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;Usage:&lt;/span&gt;
&lt;span class="sd"&gt;    docopttest.py [options] [&amp;lt;logfiles&amp;gt;...]&lt;/span&gt;
&lt;span class="sd"&gt;    docopttest.py (-h | --help)&lt;/span&gt;

&lt;span class="sd"&gt;Options:&lt;/span&gt;
&lt;span class="sd"&gt;  -l, --limit=&amp;lt;int&amp;gt;          Smallest value shown&lt;/span&gt;
&lt;span class="sd"&gt;  -i, --include=&amp;lt;cmd,...&amp;gt;    Show only these comma separated commands&lt;/span&gt;
&lt;span class="sd"&gt;  -e, --exclude=&amp;lt;cmd,...&amp;gt;    Show only these comma separated commands&lt;/span&gt;
&lt;span class="sd"&gt;  -h, --help                 Show this message and exit.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;docopt&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;limit = &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--limit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the docstring for the script very clearly specifies what the usage message will be.  No surprises there.  This makes it very easy to get the usage message to look just how you want it.&lt;/p&gt;
&lt;p&gt;I've heard from several other developers that they really like docopt.  I have to admit that this is the one I found the least intuitive to use.  I will also admit that I suspect this reflects more on me than it does on docopt.  It took me a while to figure out how different parts of the string were significant, how to make the logfiles argument accept more than one filename, for instance.&lt;/p&gt;
&lt;p&gt;The best quote I've read about docopt: "it's great if you like to write documentation".&lt;/p&gt;
&lt;h3&gt;fire&lt;/h3&gt;
&lt;p&gt;Fire is a relatively recent addition to this space from Google.  It stands out as the one least designed for creating plain command line tools.  It appears to be targeted at several other spaces: creating REPLs, exploring code functionality, moving bash functionality to python, etc.  It is really compact and is quite clever (some would say 'magic' in a disparaging way).&lt;/p&gt;
&lt;p&gt;Here's the same code using Fire:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;logfiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;limit = &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;deleted&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fire&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, it really does a great job of getting a function (or any object) as a command line script.  Unfortunately, it skips several things which seem obvious.  I could not find a way to get short options, so to set the limit you need to use &lt;code&gt;--limit&lt;/code&gt; instead of &lt;code&gt;-l&lt;/code&gt;.  I also disliked that getting the usage strings is quite non-standard.  You must use a  raw &lt;code&gt;--&lt;/code&gt; to tell fire that the rest of the options are for it, and then do &lt;code&gt;--help&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That said, fire is fairly new and clearly under development.  It's a great idea, but it feels 'not quite ready for prime time'.&lt;/p&gt;
&lt;h3&gt;plac&lt;/h3&gt;
&lt;p&gt;Plac was really a pleasant surprise.  It has a stated goal "to have a learning curve of minutes for its core features" and really lives up to that.  Like several of the other options, plac uses annotations to encode its features.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Show only these comma separated commands&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;option&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Exclude these comma separated commands&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;option&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Smallest value shown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;option&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;log files to process&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;limit = &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, it makes for a really terse description of the command line options.  Each annotation is actually a 6-member tuple, but not all need to be specified (obviously).  In the example above, you can see that the limit option uses the fourth member of the tuple.  This is the 'type' field and is just a callable which will take a str as input.  (The other two positions are for enumerating specific choices for an option and for changing the META description in the usage output.)&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I was surprised by the number and quality of options available for doing something that, frankly, is already reasonably well covered by the standard library.  Given a personal project to create a command line utility, I would have a tough choice between plac and click.  I suspect I'll likely go with click as it had some other nice features, but we'll see next time I'm in that position.&lt;/p&gt;
&lt;p&gt;Unfortunatley, for the project I was originally looking at, I decided that using argparse was the best option.  Not needing another module to load was going to make this script far more usable to my coworkers than having easier command line option code.&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>Stay or Go</title><link href="/stay-or-go.html" rel="alternate"></link><published>2018-01-23T00:00:00-07:00</published><updated>2018-01-23T00:00:00-07:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2018-01-23:/stay-or-go.html</id><summary type="html">&lt;p&gt;My work had a large round of layoffs about four months ago. While the "powers that be" always plan for some attrition associated with a layoff (if they're smart), I don't believe they expected quite as many folks to jump ship as has happened.&lt;/p&gt;
&lt;p&gt;This has led me to do …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My work had a large round of layoffs about four months ago. While the "powers that be" always plan for some attrition associated with a layoff (if they're smart), I don't believe they expected quite as many folks to jump ship as has happened.&lt;/p&gt;
&lt;p&gt;This has led me to do some soul-searching as to whether I want to stay in my current position or start another job search. Thinking about it, and watching friends and co-workers depart, I'm struck by how personal a decision this is and how different the factors are for each person. This post is an effort by me to solidify and enumerate my thinking on this issue. I'm sorry if you came for a technical topic, try again next week, but this is an important aspect of modern software development.&lt;/p&gt;
&lt;p&gt;My current situation is this. I'm a senior engineer at a large company where I started about 10 months ago. I'm part of a relatively young, very small team maintaining and developing a crucial piece of the entire product. I was the sixth developer on the team when I was hired. I'm now one of three developers.&lt;/p&gt;
&lt;h1&gt;In Favor of Leaving&lt;/h1&gt;
&lt;p&gt;As I look around me at work, I can see large holes in the organization where key people have left either voluntarily or involuntarily. There are several areas of our product where there is very little developer knowledge remaining.&lt;/p&gt;
&lt;p&gt;This swiss-cheese organization is faced with a fairly major release that we're scheduled to ship before the end of the year. This is probably not impossible, but I suspect it's going to be a long haul to get there.&lt;/p&gt;
&lt;p&gt;The biggest concern I have is actually with our mid-level management. From my level there seems to be a lack of vision and a clear lack of communication from the management at that level. It's not clear that our business line leader has a plan for how to turn this organization around.&lt;/p&gt;
&lt;p&gt;Another concern, although not oddly the highest concern, is that I could be laid off at any point. I don't put too much weight behind this concern for two reasons:
&lt;ol&gt;
    &lt;li&gt;From my experience, "I could get laid off tomorrow" is true no matter where you are.&lt;/li&gt;
    &lt;li&gt;When I left my previous position I thought for certain if I stayed that I would have been laid off by this point in time. I was wrong about that. Had I stayed, I would still be there.&lt;/li&gt;
&lt;/ol&gt;
These are all things that weigh on the "I should start looking" side. I'm leaving out the recommendations I have received from a couple of coworkers whom I respect that it's time to go. I'm disregarding these not because I don't believe them, but rather that, as I said above, this is a fairly personal choice. That person's reasons to get out might be very different than mine.  Their emotional connection to the company and, more importantly, to the product, are also different than mine.&lt;/p&gt;
&lt;h1&gt;In Favor of Staying&lt;/h1&gt;
&lt;p&gt;When I consider staying at my current position, I can think of many reasons why it might be worth sticking it out. The primary one is that I generally enjoy the crowd of people I interact with on a regular basis. There are some interesting political issues to deal with (but none of them are nasty or difficult) and there's a reasonably high level of expertise in the lab.&lt;/p&gt;
&lt;p&gt;Despite the mid-level management leaving much to be desired, I have found my local managers to be very effective leaders. I enjoy having a manager who helps to solve the hard questions quickly but gives me the rope to take care of things without supervision. I'm lucky to have that here.&lt;/p&gt;
&lt;p&gt;Another factor on the side of staying is the large opportunity provided here. I've only been in the position for 10 months, so there's still a lot of material about the product, the organization, and the company for me to take in and learn. Also, given the "swiss cheese" nature of the organization at this point, there's going to be amble opportunity (perhaps too much) to learn new areas and cover new topics.&lt;/p&gt;
&lt;p&gt;Finally, I really enjoy the work/life balance I've seen in this organization up to this point. It's very close to home, allowing me to maintain my bike commuting and still get home for lunch easily. The vacation policy is covering the trips I've got regularly planned with my family. And I'm comfortable taking an hour here and there to help out in my kids' school. That's really important to me.&lt;/p&gt;
&lt;h1&gt;What do I do?&lt;/h1&gt;
&lt;p&gt;I'll admit that this is not an easy decision and there's definitely risk either way, but at this point I'm choosing to hang on to my position and see if I can't ride this storm out. There are several factors that I really like about this job and there's no guarantee that I'll be happy if I switch.&lt;/p&gt;
&lt;p&gt;But I reserve the right to change that at any moment. :)&lt;/p&gt;
&lt;p&gt;(NOTE: this post was written several months ago but sat unpublished until now. At this point my job status has changed. More on that in later posts.)&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>Travis CI - A quick review</title><link href="/travis-ci-a-quick-review.html" rel="alternate"></link><published>2018-01-04T00:00:00-07:00</published><updated>2018-01-04T00:00:00-07:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2018-01-04:/travis-ci-a-quick-review.html</id><summary type="html">&lt;p&gt;I've recently decided to upgrade a pet-project of mine (&lt;a href="https://github.com/jima80525/pyres"&gt;a Python pod-catcher&lt;/a&gt;) to be a bit more "modern" (i.e. Python3, installable, automated builds, etc) I won't go into the details of the project (that's a story for another post), this post is just to document my experience starting up …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've recently decided to upgrade a pet-project of mine (&lt;a href="https://github.com/jima80525/pyres"&gt;a Python pod-catcher&lt;/a&gt;) to be a bit more "modern" (i.e. Python3, installable, automated builds, etc) I won't go into the details of the project (that's a story for another post), this post is just to document my experience starting up with TravisCI to get builds every time I commit.&lt;/p&gt;
&lt;h2&gt;Continuous Integration&lt;/h2&gt;
&lt;p&gt;I am big fan of continuous integration and running unit tests on every build. In my work-life I've written (a long time ago) and set up (more recently) CI build systems for various types of projects, usually in C++. Tools like Jenkins, Bamboo, and TeamCity have really changed the landscape of how this works in a corporate world and this is a more-than-welcome improvement.&lt;/p&gt;
&lt;p&gt;My current set up is different in several key respects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it's in Python&lt;/li&gt;
&lt;li&gt;it's open source&lt;/li&gt;
&lt;li&gt;it's dramatically smaller than my work projects usually are&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these combine to simplify the problem.&lt;/p&gt;
&lt;h2&gt;TravisCI&lt;/h2&gt;
&lt;p&gt;I won't go into the step-by-step of how to set this up (as it's very well documented &lt;a href="https://docs.travis-ci.com/user/getting-started/"&gt;here&lt;/a&gt;). I will say, however, that this process worked quite well and was remarkably painless.&lt;/p&gt;
&lt;p&gt;The main work to be done, other than creating an account and selecting which github project to build, was in creating the .travis.yml file. I've used yaml a bit in the past but I'm certainly not an expert in it. That said, the examples given were more than sufficient to get me up and running and to play with various options. The only issue I found was an odd permissions problem that started after my first few builds. A quick search showed that this could be fixed by putting &lt;em&gt;sudo: true&lt;/em&gt; line in the yaml file.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So far, I'm quite impressed! In just a short while I was able to get my project building on a per-commit basis on several versions of Python. I even managed to add the badge in the REAMDE.rst file for the project to indicate the status. The most difficult part of this process was getting my project into shape to run unit tests on both Python2 and Python3!&lt;/p&gt;
&lt;p&gt;Way to go, TravisCI!&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>TIL - Keeping track of small ideas</title><link href="/til-keeping-track-of-small-ideas.html" rel="alternate"></link><published>2017-12-30T00:00:00-07:00</published><updated>2017-12-30T00:00:00-07:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2017-12-30:/til-keeping-track-of-small-ideas.html</id><summary type="html">&lt;p&gt;If you're like most developers, you have a wide range of "little things" that you do just infrequently enough that you never remember exactly how to do them.  "How do I open the filename under my cursor in Vim?", "How do I commit only part of a file in Git …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you're like most developers, you have a wide range of "little things" that you do just infrequently enough that you never remember exactly how to do them.  "How do I open the filename under my cursor in Vim?", "How do I commit only part of a file in Git?", "How do I get sed to replace xxx with yyy in a series of files?", etc.  The sort of things that you know are possible, but just don't use often enough to commit to memory.&lt;/p&gt;
&lt;p&gt;There are many techniques for remembering these, ranging from googling it every time you need it to writing it down in a lab notebook.  I recently came across an idea that's really growing on me, called TIL for "today I learned...".&lt;/p&gt;
&lt;p&gt;The examples I've seen are kept in a github repo with a nice markdown index as the README.md file.  Each of the little tidbits of information are kept in their own markdown file in a directory indicating a category.  For example, you might have a &lt;code&gt;git&lt;/code&gt; directory with a &lt;code&gt;partial_commit.md&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;The example I first saw, &lt;a href="https://github.com/jbranchaud/til"&gt;jbranchaud/til&lt;/a&gt;, was organized this way.  He also was very consistent in placing a good title at the top of each topic file.  This consistency makes it very easy to automate the creation of the README file, so I've added that to my version (and created a pull request for the original author).  In my repo I've added the creation script as a pre-commit hook for git so this is done automatically for me each time I commit!&lt;/p&gt;
&lt;p&gt;You can see the creation script &lt;a href="https://github.com/jima80525/til/blob/master/createReadme.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please share your methods for tracking items like these that you've found useful in the comments below!&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>Paginating Command Line Output</title><link href="/paginating-command-line-output.html" rel="alternate"></link><published>2017-12-06T00:00:00-07:00</published><updated>2017-12-06T00:00:00-07:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2017-12-06:/paginating-command-line-output.html</id><summary type="html">&lt;p&gt;Paginating output from a command line programs seems like it should be easy, but before you go and write it yourself (and discover all the fun of terminal types), I recommend the &lt;a href="http://click.pocoo.org/5/"&gt;Click&lt;/a&gt; package.  Click is a handy little tool for creating command line applications.  While it looks like much …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Paginating output from a command line programs seems like it should be easy, but before you go and write it yourself (and discover all the fun of terminal types), I recommend the &lt;a href="http://click.pocoo.org/5/"&gt;Click&lt;/a&gt; package.  Click is a handy little tool for creating command line applications.  While it looks like much of the package is devoted to command line args and subcommands, it also has a nice paging utility for relatively small amounts of text.&lt;/p&gt;
&lt;h1&gt;How To&lt;/h1&gt;
&lt;p&gt;I was really impressed with how simple Click made paginating the display of a block of text.  If you discount some minor refactoring I had to do to make a function work with the click.command decorator, there were really only three changes needed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;add &lt;code&gt;import click&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add &lt;code&gt;@click.command()&lt;/code&gt; decorator to my function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;change the output section from a for loop printing each line to calling &lt;code&gt;click.echo_via_pager('\n'.join(lines))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Pros&lt;/h1&gt;
&lt;p&gt;Click is well put together, well documented, installed with pip, and worked easily!  I was definitely happy with it for my original task, which was paginating a few hundred lines of text.&lt;/p&gt;
&lt;h1&gt;Cons&lt;/h1&gt;
&lt;p&gt;I ran another test with a second script, this time using a generator to process tens of thousands of lines of text.  The paginator in Click was definitely not designed for this use case and I couldn't make it work.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I was quite happy with how easy Click made the simple task simple.  Looking at the documentation, it seems that there are a number of other features which will be handy for some of my bigger projects.  I'll definitely be pulling it in for some future projects and refactoring.  I hope to have a comparison of click and argparse in a future post.&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>Know Your Tools</title><link href="/know-your-tools.html" rel="alternate"></link><published>2017-11-02T00:00:00-06:00</published><updated>2017-11-02T00:00:00-06:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2017-11-02:/know-your-tools.html</id><summary type="html">&lt;p&gt;Today I was chatting with a young engineer who made a remark about a (much older) coworker that really struck a nerve.  The remark was "I have to do all the pull requests for his code as he hasn't learned git well enough."&lt;/p&gt;
&lt;p&gt;One of the best pieces of advice …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I was chatting with a young engineer who made a remark about a (much older) coworker that really struck a nerve.  The remark was "I have to do all the pull requests for his code as he hasn't learned git well enough."&lt;/p&gt;
&lt;p&gt;One of the best pieces of advice that I received as a young engineer was that time spent mastering your tools is rarely time wasted.  Since then the tools have changed many, many times, but the concept still holds true.  A little time spent periodically learning more about your editor, your rcs, whatever tool you use regularly, almost always pays off in the long run.&lt;/p&gt;
&lt;p&gt;Sometimes this is a long, boring, process.  I can't say that reading the O'Rielly book about Git was fascinating, but it certainly has paid off these last few years.  Having areas of expertise where you can help your team, especially when you are the new member, is really valuable.&lt;/p&gt;
&lt;p&gt;Also, there's something politically saavy about being well-versed in your professional toolkit.  I've noticed over the years that most people who have taken the time to be good at vim/git/emacs/whatever generally have invested in learning to write reasonable code.  Not all of them are great, but they're rarely the person you are worried about.&lt;/p&gt;
&lt;p&gt;So, my call to action is this: spend some time regularly "sharpening the saw".  It'll pay off both in your productivity but also in your interaction with your peers!&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>Long Functions</title><link href="/long-functions.html" rel="alternate"></link><published>2017-10-25T00:00:00-06:00</published><updated>2017-10-25T00:00:00-06:00</updated><author><name>Jim Anderson</name></author><id>tag:None,2017-10-25:/long-functions.html</id><summary type="html">&lt;p&gt;Today at work, a friend shared a youtube video titled "Object Oriented Programming is Bad" (no, I won't share it here as I didn't like it).  There were several points that the narrator made, but my attention was drawn to a section where he discusses function length and how splitting …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today at work, a friend shared a youtube video titled "Object Oriented Programming is Bad" (no, I won't share it here as I didn't like it).  There were several points that the narrator made, but my attention was drawn to a section where he discusses function length and how splitting functions into smaller functions is bad.&lt;/p&gt;
&lt;p&gt;As I told my coworker, I don't have many hard-and-fast rules when it comes to coding standards as it generally leads to arguments with the team which are almost universally unproductive.   That said, this guy was nuts.&lt;/p&gt;
&lt;p&gt;I work in a code base written by people who clearly agreed with his philosophy and, I have to say that it's horrible to maintain.  Now, I can hear the nay-sayers chiming in, "just because those people didn't write readable 1000 line functions, doesn't mean it's not possible!".  While that is a valid point, the counter argument is that it's quite a bit harder to write a 1000 line function that is readable than it is to write a 30 line function that is.&lt;/p&gt;
&lt;p&gt;What I've seen over many codebases in several languages is that longer functions always end up with strange control flow issues (lots of gotos in the present codebase) and all sorts of bad coding practices sprinkled about: reusing local variables, resource management issues, copy and paste code.&lt;/p&gt;
&lt;p&gt;So again, while I will grant the argument that it is possible to write long functions that make sense.  Experience has shown that really long functions go hand-in-hand will poorly written, hard to understand code.&lt;/p&gt;
&lt;p&gt;That's why it's one of my 'rules'.&lt;/p&gt;</content><category term="Posts"></category></entry></feed>